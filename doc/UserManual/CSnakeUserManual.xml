<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
  <title>CSnake tutorial</title>

  <bookinfo>
    <date>12/03/2008</date>

    <author>
      <firstname>Maarten</firstname>

      <surname>Nieber</surname>

      <affiliation>
        <orgname>Computational Imaging Lab, Pompeu Fabra University and
        Networking Research Center on Bioengineering, Biomaterials and
        Nanomedicine (CIBER-BBN)</orgname>

        <address>Information &amp; Communication Technologies Department - D. 313
Pompeu Fabra University, Pg. Circumval·lació 8
08003 Barcelona - Spain
Phone +34 935 421323</address>
      </affiliation>
    </author>
  </bookinfo>

  <chapter>
    <title>What is CSnake</title>

    <para>CSnake is a tool for C++ source code configuration. This means that
    CSnake can be used to create libraries and executables out of C++ source
    code. For this purpose, CSnake allows you to:</para>

    <itemizedlist>
      <listitem>
        <para>define libraries and executables</para>
      </listitem>

      <listitem>
        <para>specify which source files should be incorporated into a library
        or executable</para>
      </listitem>

      <listitem>
        <para>specify paths where the compiler should search for include
        files</para>
      </listitem>

      <listitem>
        <para>define dependencies between different libraries and executables
        (automatically handling the paths where include files from the
        dependent projects should be searched).</para>
      </listitem>

      <listitem>
        <para>include <emphasis>config-files</emphasis> and
        <emphasis>use-files</emphasis> from CMake. This is possible because
        <emphasis role="bold">CSnake is internally using
        CMake</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>The output of CSnake is a set of CMake files. In most cases, you
    will not be aware of this, because you will use CSnakeGUI to produce a set
    of Visual Studio files (on Windows) or KDevelop files that you can
    directly use to build your applications and libraries.</para>

    <note>
      <para>The name CSnake derives from the Python programming language (as
      CSnake is written in Python) and CMake.</para>
    </note>

    <note>
      <para>As mentioned above, CSnake is built upon CMake. This manual will
      often state that CSnake creates configuration files, even though the
      actual work is performed by CMake. This is to enhance the readability,
      and not to take credit for the good work done by the creators of
      CMake!</para>
    </note>
  </chapter>

  <chapter>
    <title>Installing CSnake</title>

    <para>Copy the contents of
    \\193.145.44.5\standard_software_installers\WindowsXP\GIMIAS\Other\CSnake
    to your Program Files folder. You can start CSnakeGUI by double clicking
    on CSnakeGUI.bat. Before experimenting with CSnakeGUI, we advise you to
    read the next chapter on creating a CSnake project.</para>

    <important>
      <para>In this user guide, we will assume that CSnake is installed in
      C:\Program Files\CSnake. If you install CSnake to a different folder
      (for example on Linux), use this folder in the examples to
      follow.</para>
    </important>
  </chapter>

  <chapter>
    <title>How to create a CSnake project</title>

    <para>When you want to create a library (or executable) out of your source
    code, you need to create a CSnake project for that library. This is done
    by instantiating a Python class called csnBuild.Project. The following
    Python file contains an example:</para>

    <example>
      <title>CSnake example: csnMyLibrary.py</title>

      <para><programlisting format="linespecific" id="python" lang="python"
      linenumbering="numbered">import csnBuild
myLibrary = csnBuild.Project("MyLibrary", "library")
myLibrary.AddSources(["src/MyLibrary.cpp", "src/MyLibrary.h"])
myLibrary.AddIncludeFolders(["src"])</programlisting><note>
          <para>The csnMyLibrary.py file is available in the Examples
          subfolder. Instead of using the existing file, you can also create a
          new file and paste the above lines into the empty file.</para>
        </note></para>

      <para>This small Python program is sufficient to create your first
      library using CSnake. We will step through it line by line. Line 2 tells
      the Python interpreter to create a new csnBuild.Project for building a
      library with the name MyLibrary. The result is stored in the variable
      myLibrary. In line 3, you add a list of source files to your library:
      myLibrary.cpp and myLibrary.h. The square brackets [ ] are used to
      indicate the beginning and ending of the list. In line 4, a list of
      include folders (containing only the folder called 'src') is added to
      the library project.</para>
    </example>

    <note>
      <para>This Python program only contains the specification of your
      library. You will use CSnakeGUI to generate the Visual Studio files (or
      KDevelop files) that can be used to build the library.</para>
    </note>
  </chapter>

  <chapter>
    <title>Generating a CSnake project using Python</title>

    <note>
      <para>This chapter explains how to generate a CSnake project (i.e.
      produce Visual Studio files) using the Python interpreter instead of
      CSnakeGUI. It may provide some more insight how CSnake works, but can be
      skipped by users who only want to use CSnakeGUI.</para>
    </note>

    <para>To generate the CSnake output for our myLibrary project, add the
    following lines to csnMyLibrary.py:</para>

    <programlisting>if __name__ == "__main__":
    generator = csnBuild.Generator()
    generator.Generate(myLibrary, "./bin", "./install")</programlisting>

    <para>These lines create a csnBuild.Generator, which is used to generate
    CMake files for myLibrary. Now open a prompt in the folder holding
    csnMyLibrary.py. We will use the PYTHONPATH variable to ensure that
    csnBuild can be found by the interpreter (adjust the path below as
    necessary), and then run CSnake</para>

    <programlisting>&gt;set PYTHONPATH="C:\Program Files\CSnake\src"
&gt;python csnMyLibrary.py</programlisting>

    <para>After running this, CMake files have been placed in the folder
    "./bin/libraries/MyLibrary" (a subfolder in the current path). You can now
    use CMake and then Visual Studio to build your library. By building the
    INSTALL project in Visual Studio, the library will be copied to the folder
    "./install".</para>

    <note>
      <para>In general, it is not necessary to build the INSTALL project for
      an application that is created with CSnake. Instead, you can directly
      run the application from the bin folder.</para>
    </note>
  </chapter>

  <chapter>
    <title>Generating a CSnake project using CSnakeGUI</title>

    <para>In this chapter we will use CSnakeGUI to produce the VIsual Studio
    (or KDevelop) files for building myLibrary. Double click CSnakeGUI.bat and
    set up the screen as below.</para>

    <example>
      <title>CSnakeGUI screenshot: building myLibrary</title>

      <graphic fileref="http://cilab2.upf.edu/~ftpcistibuser/UserManuals/CSnake/Images/MyLibrary.png"
               format="PNG" />
    </example>

    <para>The Project Path is the location of the Python file we created in
    the previous chapters. In the Instance field, you should select the name
    of the variable that is holding the target project that you wish to build.
    If you press the Update button, CSnakeGUI will scan the current CSnake
    file and create a list of possible values for the Instance field. Finally,
    the Bin Folder is the location where the Visual Studio files as well as
    the binary project files (the output of the compiler and linker) are
    placed. Ensure that the option 'Create CMake files and run CMake' is
    selected and press 'Do --&gt;' to run CSnake. When you browse to the Bin
    Folder in your file manager, you will see a subfolder 'library/MyLibrary'
    that contains the solution file (on Windows) or KDevelop file (on Linux)
    for building MyLibrary.</para>
  </chapter>

  <chapter>
    <title>Adding dependency projects</title>

    <para></para>

    <section>
      <title>Dependency projects</title>

      <para>In most cases, your project will depend on other projects. Let's
      assume that MyLibrary needs another library called MyDll</para>

      <example>
        <title>csnMyLibrary.2.xml</title>

        <para><programlisting format="linespecific" id="python2" lang="python"
        linenumbering="numbered">import csnBuild
import csnUtility

myDll = csnBuild.Project("MyDll", "dll")
myDll.AddSources([csnUtility.GetDummyCppFilename()])

myLibrary = csnBuild.Project("MyLibrary", "library")
myLibrary.AddSources(["src/MyLibrary.cpp", "src/MyLibrary.h"])
myLibrary.AddIncludeFolders(["src"])
myLibrary.AddProjects([myDll])</programlisting></para>
      </example>

      <para>Since we only introduced the new project myDll for educational
      purposes, it does not need to contain any useful C++ code. Instead of
      adding some existing source files to myDll, we chose to use a built-in
      CSnake feature here: the <emphasis role="bold">dummy cpp
      file</emphasis>. This source file can be added to any project to prevent
      the project from having no source files. The path to the dummy cpp file
      is obtained by calling csnUtility.GetDummyCppFilename(). In the last
      line of the example, myDll was added as a dependency project of
      myLibrary. This means that myLib will link myDll, and is able to locate
      and use any of its include files.</para>

      <note>
        <para>A CSnake project that has no source file cannot be generated.
        Trying to do so will result in an error.</para>
      </note>

      <warning>
        <para>CSnake - or actually: CMake - generates vcproj files for the
        target project and all the dependency projects. It is advised not to
        open the <emphasis>dependency project
        </emphasis><emphasis>files</emphasis> directly, for they may have
        missing dependencies. In the example above, using MyDll.sln directly
        may not work. Of course, for working with MyLibrary.sln there is no
        such problem, as it is the target project.</para>
      </warning>
    </section>

    <section>
      <title>Reusing the Bin Folder</title>

      <para>If your source tree contains different executable projects, it is
      possible - and recommended - to use the same Bin Folder for building
      these executables. You simply change the target CSnake file in CSnakeGUI
      and set a difference instance in the Instance field. When you then
      configure your project, it will use the existing binaries (for
      libraries, dlls, etc) in the Bin Folder.</para>
    </section>
  </chapter>

  <chapter>
    <title>Building the CISTIB third party libraries</title>

    <para>The CISTIB toolkit comes with many libraries that can be used as
    dependency projects. Many of these libraries are third party libraries, or
    CISTIB libraries that depend on third party libraries. Therefore, the
    first step in building the CISTIB toolkit is to build the third party
    libraries. Run CSnakeGUI.bat, and fill in the Third Party Root Folder and
    Third Party Bin Folder as illustrated in the figure below (for building
    the third party libraries, you need not care about any of the other
    fields). Then select the option 'Configure Third Party Folder' and press
    'Do --&gt;'.<graphic
    fileref="http://cilab2.upf.edu/~ftpcistibuser/UserManuals/CSnake/Images/BuildingThirdParties.png" /></para>

    <note>
      <para>At the moment, the Third Party Root Folder is a subfolder of the
      CISTIB toolkit folder. In the near future, we will move the Third Party
      folder to a different location outside of the CISTIB toolkit. This will
      allow you to update the CISTIB toolkit folder from CVS without updating
      the third party libraries.</para>
    </note>

    <para>After this step, a solution file (or KDevelop file) has been
    generated in the Third Party Bin Folder (i.e. in the example above, the
    solution file is generated in F:\Bin\ThirdParty). Use Visual Studio or
    KDevelop to build the debug and release version of the third party
    libraries.</para>

    <note>
      <para>Building the third party libraries may give some compiler errors
      due to incorrect dependency settings between these libraries. Keep
      building the solution until no more errors appear. If you have
      Incredibuild installed, try using the Batch Build function with the
      option 'Ignore build errors' marked, and keep building the project until
      no more build errors appear.</para>
    </note>
  </chapter>

  <chapter>
    <title>Adding a dependency to a third party library (the lengthy
    way)</title>

    <para><note>
        <para>The following examples make use of csnCISTIBToolkit, which we
        assume to be located in E:\Code\Toolkit</para>
      </note>Now that the CISTIB toolkit has been built, let's go back to the
    myLibrary example and use itk as a dependency project:</para>

    <example>
      <title>csnMyLibrary.3.py</title>

      <para><programlisting format="linespecific" id="python3" lang=""
      linenumbering="numbered">import csnBuild
import csnCISTIBToolkit

myLibrary = csnBuild.Project("MyLibrary", "library")
myLibrary.AddSources(["src/MyLibrary.cpp", "src/MyLibrary.h"])
myLibrary.AddIncludeFolders(["src"])

itk = csnCISTIBToolkit.itk()
myLibrary.AddProjects([itk])</programlisting></para>
    </example>

    <para>The csnCISTIBToolkit Python file serves as a directory of available
    CSnake projects. For each project in the CISTIB toolkit, it has a function
    that returns the unique instance of that project. In the above example, we
    use the itk() function (note that if you call the itk() function again,
    the same itk project instance will be returned). To use csnCISTIBToolkit
    in CSnakeGUI, use the <emphasis role="bold">Add button</emphasis> to add
    the <emphasis>root folder </emphasis>where csnCISTIBToolkit.py can be
    found (in this example, the location is E:\Code\Toolkit):</para>

    <graphic fileref="http://cilab2.upf.edu/~ftpcistibuser/UserManuals/CSnake/Images/MyLibraryAndEvoLib.png"
             format="PNG" />

    <important>
      <para>The Add and Remove button in CSnakeGUI can be used to specify
      <emphasis>root folders</emphasis>. CSnakeGUI will add these root folders
      to the system path of Python, so that they are used when an
      <emphasis>import </emphasis>statement is encountered in the Python code.
      You can also use the import statement with a subfolder of a root folder,
      but in that case every node in the subfolder path must contain a file
      called __init__.py (<ulink
      url="http:/www.network-theory.co.uk/docs/pytut/Packages.html">read
      more</ulink>).</para>
    </important>
  </chapter>

  <chapter>
    <title>Adding a dependency to a third party library (the standard
    way)</title>

    <para>In the last example of building myLibrary, we used the function
    csnCISTIBToolkit.itk() to obtain the instance of the ITK CSnake project.
    In the example below, we will use less code to achieve the same
    effect:</para>

    <example>
      <title>csnMyLibrary.4.py</title>

      <para><programlisting format="linespecific" id="python4" lang="python"
      linenumbering="numbered">import csnBuild
from csnCISTIBToolkit import *

myLibrary = csnBuild.Project("MyLibrary", "library")
myLibrary.AddSources(["src/MyLibrary.cpp", "src/MyLibrary.h"])
myLibrary.AddIncludeFolders(["src"])

myLibrary.AddProjects([itk()])</programlisting></para>
    </example>

    <para>Note that at line 2, we import all the symbols from csnCISTIBToolkit
    into our CSnake file. This means that at line 8, we can now call itk()
    instead of writing csnCISTIBToolkit.itk(). However, the following syntax
    for line 8 will also work:</para>

    <programlisting format="linespecific" id="python5" lang="python"
                    linenumbering="unnumbered">myLibrary.AddProjects([itk])</programlisting>

    <para>In this version, we are passing the itk
    <emphasis>function</emphasis> at line 8. CSnake will call this function
    and add the result (which should be a csnBuild.Project instance) as a
    dependency project. Arguably, this involves some <emphasis>magic
    behaviour</emphasis> that could raise a few eyebrows, but on the other
    hand it offers an intuitive syntax to the end users of CSnake. For this
    reason, most of the standard CSnake files that come with the CISTIB
    toolkit pass functions (declared in csnCISTIBToolkit) in calls to the
    AddProjects function.</para>
  </chapter>

  <chapter>
    <title>Building and running GIMIAS</title>

    <note>
      <para>In this chapter, it is assumed that you have already built the
      CISTIB toolkit third party libraries.</para>
    </note>

    <para>GIMIAS stands for Graphical Interface for Medical Image Analysis and
    Simulation. It is an application framework based on the CISTIB toolkit.
    The CSnake file for GIMIAS is found in
    &lt;Toolkit&gt;\cilabApps\LCore\Applications\csnGimias.py, where
    &lt;Toolkit&gt; is the path where you placed the CISTIB toolkit files.
    Enter this filename in the 'CSnake File' field of CSnakeGUI; in the
    Instance field enter 'gimias'. As explained in chapter 8, use the
    <emphasis role="bold">Add</emphasis> button to add the folder where
    csnCISTIBToolkit.py can be found (the root of the CISTIB toolkit source
    folder) to the list of root folders. Also, set the Bin Folder to the
    location where you want the binaries of GIMIAS to be installed.<note>
        <para>Not only GIMIAS, but also all the other projects of the CISTIB
        toolkit will be placed in the Bin Folder (except for the third party
        project binaries, which are placed in the Third Party Bin Folder). It
        is a good idea to choose a central location for the Bin Folder (such
        as F:/Bin/Toolkit), so that you can use the same Bin Folder for any
        executable (not just GIMIAS) that is based on the CISTIB
        toolkit.</para>
      </note></para>

    <para>Edit the GIMIAS csnake file; at the bottom of this file, choose the
    plugins that you want to use in GIMIAS:</para>

    <example>
      <title>csnGimias.py</title>

      <para><programlisting># Used to configure gimias
import csnBuild
from csnCISTIBToolkit import *

gimias = csnBuild.Project("Gimias", "executable")
gimias.AddSources(["main.cxx"])
projects = [lcore]
gimias.AddProjects(projects)

plugins = [
    angioMorphologyPlugin,
    meshPlugin,
    angioSegmentationPlugin,
    dicomInterfacePlugin,
    cardiacAnalysisPlugin
]
gimias.AddProjects(plugins, _dependency = 0)
</programlisting></para>
    </example>

    <para>Open csnCISTIBToolkit.py to find a list of plugins that can be
    inserted into the plugins list. Finally, select the option 'Create CMake
    files and run CMake' is selected and press 'Do --&gt;' to run CSnake. You
    can now open the Visual Studio or KDevelop files that were generated in
    the Bin folder, and build the GIMIAS application. The resulting gimias
    application file (on Window: gimias.exe) is placed in the bin/debug or
    bin/release subfolder of the Bin folder.</para>

    <important>
      <para>Before you can run GIMIAS from the Bin folder, you have to execute
      the option 'Install files to Bin folder' (select this option at the
      bottom of CSnakeGUI and press the 'Do --&gt;' button). This will copy
      all the necessary dlls and resource files to the bin folder. You have to
      do this only the first time before running GIMIAS, and whenever you
      re-build the third party binaries.</para>
    </important>

    <important>
      <para>If you run GIMIAS from the debugger, make sure that the working
      folder is set to the folder where the GIMIAS application is
      located.</para>
    </important>
  </chapter>

  <chapter>
    <title>Adding tests</title>

    <para>CSnake supports the CxxTest framework for testing C++ code. Use the
    AddTests function to add tests, as is done in the last line of the
    following example:</para>

    <programlisting format="linespecific" id="python4" lang="python"
                    linenumbering="numbered">import csnBuild
from csnCISTIBToolkit import *

myLibrary = csnBuild.Project("MyLibrary", "library")
myLibrary.AddSources(["src/MyLibrary.cpp", "src/MyLibrary.h"])
myLibrary.AddIncludeFolders(["src"])
myLibrary.AddTests(["test/*.h"], cxxTest)</programlisting>

    <para>Note that you have to supply the cxxTest project in the call to
    AddTests. The following lines come from test/MyLibraryTest.h, and
    illustrate how to create a test (in this case, we test that calling the
    MyLibrary function returns 123).</para>

    <programlisting>class MyLibraryTest : public CxxTest::TestSuite 
{
public:
    void TestMyLibrary()
    {
        TS_ASSERT_EQUALS(123, MyLibrary());
    }
};
</programlisting>

    <para>Now build myLibrary with CSnake. The solution will contain a project
    called MyLibraryTest. When you build this project, all classes in the
    TestLibTest project that are derived from CxxTest::TestSuite will be
    automatically added to a test runner. When you execute the MyLibraryTest
    project, the tests will be run and a report will be printed on the screen.
    The above case shows the most basic usage of CxxTest. For more information
    - about using more powerful assertion statements for example - please read
    <ulink url="http://cxxtest.sourceforge.net/guide.html">the CxxTest user
    manual.</ulink></para>
  </chapter>

  <chapter>
    <title>Advanced CSnake project features</title>

    <para>So far, we have covered adding source files, include folders and
    dependency projects to a CSnake project. This chapter describes some more
    advanced features that are available.</para>

    <section>
      <title>Use of wild cards</title>

      <programlisting>project = csnBuild.Project("Project", "library")
project.AddSources("src/*.h", "src/*.cpp")</programlisting>

      <para>If you use a wild card in a call to AddSources, all source files
      matching that wild card are added. Each wild card must at least match
      one source files (or see the following section).</para>
    </section>

    <section>
      <title>Checking that sources exist</title>

      <programlisting>project = csnBuild.Project("Project", "library")
project.AddSources("src/*.h", "src/*.cpp", _checkExists = 0)</programlisting>

      <para>Using the option _checkExists = 0, CSnake will not raise an error
      if the specified sources cannot be found.</para>
    </section>
  </chapter>

  <glossary>
    <glossdiv>
      <title>Glossary</title>

      <glossentry>
        <glossterm>Project (CSnake)</glossterm>

        <glossdef>
          <para>A CSnake Project is a Python class that is used by the
          Generator to create Compiler project files for a C++ library or
          executable. This class has member functions for specifying include
          paths, source files, etc.</para>
        </glossdef>
      </glossentry>

      <glossentry>
        <glossterm>Instance (CSnake Project)</glossterm>

        <glossdef>
          <para>A variable containing a CSnake Project. Remember that a CSnake
          Project is a class, so you must create an instance to use it.</para>
        </glossdef>
      </glossentry>

      <glossentry>
        <glossterm>Generator</glossterm>

        <glossdef>
          <para>The class that takes a CSnake Project instance as input and
          produces CMake output files (that can be used to generate the build
          files).</para>
        </glossdef>
      </glossentry>

      <glossentry>
        <glossterm>Compiler project files</glossterm>

        <glossdef>
          <para>These files are the end results of using CSnakeGUI (or the
          CSnake Generator and CMake). On Linux, the compiler project files
          can be make files or KDevelop files. On Windows, the compiler
          project files will be Visual Studio solution files.</para>
        </glossdef>
      </glossentry>

      <glossentry>
        <glossterm>CMake</glossterm>

        <glossdef>
          <para>This is the tool that CSnake is</para>
        </glossdef>
      </glossentry>
    </glossdiv>
  </glossary>
</book>